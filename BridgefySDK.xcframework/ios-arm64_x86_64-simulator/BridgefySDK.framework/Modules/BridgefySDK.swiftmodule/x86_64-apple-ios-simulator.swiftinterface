// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BridgefySDK
import CommonCrypto
import CoreBluetooth
import Foundation
import Swift
import UIKit
import _Concurrency
public enum BridgefyError : Swift.Error {
  case simulatorIsNotSupported
  case notStarted
  case alreadyStarted
  case missingBundleID
  case invalidAPIKeyFormat
  case internetConnectionRequired
  case sessionError
  case expiredLicense
  case inconsistentDeviceTime
  case BLEUsageNotGranted
  case BLEUsageRestricted
  case BLEPoweredOff
  case BLEUnsupported
  case BLEUnknownError
  case dataLengthExceeded
  case dataValueIsEmpty
  case peerIsNotConnected
  case licenseError(code: Swift.Int)
  case storageError(code: Swift.Int)
  case encodingError(code: Swift.Int)
  case encryptionError(code: Swift.Int)
}
public enum BridgefyTransmissionMode {
  case p2p(userID: Foundation.UUID)
}
public protocol BridgefyDelegate : AnyObject {
  func bridgefyDidFailToStart(with error: BridgefySDK.BridgefyError)
  func bridgefyDidStart(with currentUserID: Foundation.UUID)
  func bridgefyDidConnect(with userID: Foundation.UUID)
  func bridgefyDidDisconnect(from userID: Foundation.UUID)
  func bridgefyDidSendMessage(with messageID: Foundation.UUID)
  func bridgefyDidFailSendingMessage(with messageID: Foundation.UUID, withError error: BridgefySDK.BridgefyError)
  func bridgefyDidReceiveData(_ data: Foundation.Data, using transmissionMode: BridgefySDK.BridgefyTransmissionMode)
}
@_hasMissingDesignatedInitializers public class Bridgefy {
  public static let manager: BridgefySDK.Bridgefy
  public func start(withAPIKey apiKey: Swift.String, delegate: BridgefySDK.BridgefyDelegate) throws
  public func send(_ data: Foundation.Data, using transmissionMode: BridgefySDK.BridgefyTransmissionMode) throws -> Foundation.UUID
  @objc deinit
}
