// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BridgefySDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import BridgefySDK
import CommonCrypto
import CoreBluetooth
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class Bridgefy {
  public static let manager: BridgefySDK.Bridgefy
  public func start(withAPIKey apiKey: Swift.String, propagationProfile: BridgefySDK.PropagationProfile = .standard, delegate: BridgefySDK.BridgefyDelegate, verboseLogging: Swift.Bool = false) throws
  public func send(_ data: Foundation.Data, using transmissionMode: BridgefySDK.TransmissionMode) throws -> Foundation.UUID
  @objc deinit
}
public struct BFMessageMetadata {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum BridgefyError : Swift.Error {
  case simulatorIsNotSupported
  case notStarted
  case alreadyStarted
  case missingBundleID
  case invalidAPIKeyFormat
  case internetConnectionRequired
  case sessionError
  case expiredLicense
  case inconsistentDeviceTime
  case BLEUsageNotGranted
  case BLEUsageRestricted
  case BLEPoweredOff
  case BLEUnsupported
  case BLEUnknownError
  case dataLengthExceeded
  case dataValueIsEmpty
  case peerIsNotConnected
  case licenseError(code: Swift.Int)
  case storageError(code: Swift.Int)
  case encodingError(code: Swift.Int)
  case encryptionError(code: Swift.Int)
}
public enum PropagationProfile {
  case standard
  case highDensityNetwork
  case sparseNetwork
  case longReach
  case shortReach
  public static func == (a: BridgefySDK.PropagationProfile, b: BridgefySDK.PropagationProfile) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TransmissionMode {
  case p2p(userID: Foundation.UUID)
  case mesh(usersID: Foundation.UUID)
  case broadcast
}
public protocol BridgefyDelegate : AnyObject {
  func bridgefyDidFailToStart(with error: BridgefySDK.BridgefyError)
  func bridgefyDidStart(with currentUserID: Foundation.UUID)
  func bridgefyDidConnect(with userID: Foundation.UUID)
  func bridgefyDidDisconnect(from userID: Foundation.UUID)
  func bridgefyDidSendMessage(with messageID: Foundation.UUID)
  func bridgefyDidFailSendingMessage(with messageID: Foundation.UUID, withError error: BridgefySDK.BridgefyError)
  func bridgefyDidReceiveData(_ data: Foundation.Data, with messageID: Foundation.UUID, using transmissionMode: BridgefySDK.TransmissionMode)
}
extension BridgefySDK.BFMessageMetadata : Swift.Encodable {}
extension BridgefySDK.BFMessageMetadata : Swift.Decodable {}
extension BridgefySDK.PropagationProfile : Swift.Equatable {}
extension BridgefySDK.PropagationProfile : Swift.Hashable {}
